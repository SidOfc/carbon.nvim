*carbon.nvim.txt*      The simple directory tree viewer for Neovim written in Lua.
*carbon.txt*

  `Version: 0.19.1`
  `Licence: MIT`
  `Source:  https://github.com/SidOfc/carbon.nvim`
  `Author:  Sidney Liebrand <sidneyliebrand@gmail.com>`

================================================================================
TABLE OF CONTENTS                                     *carbon-contents* *carbon-toc*

  To quickly jump to this table of contents, use |gg| or |go|.
  To navigate to the helptag below the cursor, use CTRL-].

  TABLE OF CONTENTS `....` |carbon-contents|
  `--------------------------------------`
  USAGE `................` |carbon-usage|
  SETUP `................` |carbon-setup|

  UTIL `.................` |carbon-util|
  PLUGS `................` |carbon-plugs|
  ENTRY `................` |carbon-entry|
  VIEW `.................` |carbon-view|
  CARBON `...............` |carbon-carbon|
  WATCHER `..............` |carbon-watcher|
  COMMANDS `.............` |carbon-commands|
  SETTINGS `.............` |carbon-settings|
  CONSTANTS `............` |carbon-constants|

================================================================================
USAGE                                                               *carbon-usage*

  In your |$MYVIMRC| file, run `require('carbon').setup()` to initialize Carbon.

  Depending on your plugin manager you may need to call this `setup` function
  in a specific place or in a specific way. If you use any package manager
  please consult its documentation to find out where `setup` functions may be run.

  When using regular Vim |packages| this `setup` function can simply be run
  directly anywhere in your |$MYVIMRC| file since such packages are
  automatically loaded.

  Carbon replaces |netrw| by default and remaps NetRW's |Explore| and |Lexplore|
  commands to Carbon's |carbon-command-Carbon| and |carbon-command-Lcarbon| commands
  respectively. For more specific usage and configuration information, see:

  - |carbon-setup|
  - |carbon-commands|
  - |carbon-autocmds|
  - |carbon-plugs|

================================================================================
SETUP                                                               *carbon-setup*

  The behavior of this plugin can be customized by providing settings to
  `require('carbon').setup` in your |$MYVIMRC| like this:

  init.lua: >
  require('carbon').setup({
    setting = 'value',
  })
<
  init.vim: >
  lua << EOF
    require('carbon').setup({
      setting = 'value',
    })
  EOF
<
  If setting options directly is preferred, passing a function is also possible:

  init.lua: >
  require('carbon').setup(function(settings)
    settings.setting = 'value',
  end)
<
  init.vim: >
  lua << EOF
    require('carbon').setup(function(settings)
      settings.setting = 'value',
    end)
  EOF
<
  The default settings are documented in |carbon-settings|. Any settings
  supplied to `setup` when called with a table will be deep merged with
  the defaults. When `setup` is called with a function argument, settings
  are directly modified and no merging of any kind will occur.

================================================================================
CONSTANTS                                                       *carbon-constants*

  Usage: `require('carbon.constants')`

  Exposes a table containing all the constants which Carbon uses.

  `------------------------------------------------------------------------------`
  hl                                                          *carbon-constant-hl*

  Usage: `require('carbon.constants').hl`
  Value: `carbon`

  Used for all default highlighting.

  `------------------------------------------------------------------------------`
  hl_tmp                                                  *carbon-constant-hl-tmp*

  Usage: `require('carbon.constants').hl_tmp`
  Value: `carbon:tmp`

  Used for temporary highlighting. Used only by |carbon-view-focus-flash|
  at the moment.

  `------------------------------------------------------------------------------`
  augroup                                                *carbon-constant-augroup*

  Usage: `require('carbon.constants').augroup`
  Value  `carbon:tmp`

  Used for temporary highlighting. Used only by |carbon-view-focus-flash|
  at the moment.

  `------------------------------------------------------------------------------`
  directions                                          *carbon-constant-directions*

  Usage: `require('carbon.constants').directions`
  Value  `{ left = 'h', right = 'l', up = 'k', down = 'j' }`

  Helper to map "human" direction names to "vim" directions.

================================================================================
COMMANDS                                                         *carbon-commands*

  This section documents the behavior as well as the implementation of the
  various |command| commands provided by Carbon.

  `------------------------------------------------------------------------------`
  Carbon                                                   *carbon-command-Carbon*

  Implementation: `require('carbon').explore()`
  Alias:          `Explore` unless |carbon-setting-keep-netrw| is enabled.

  Replaces the current buffer with the Carbon buffer.
  When called with a <bang> (`Carbon!`) or |carbon-setting-auto-reveal| enabled,
  the tree will expand to show the current buffer path and
  |carbon-view-flash-bang| it if possible. This also works for its alias.

  `------------------------------------------------------------------------------`
  Lcarbon                                                 *carbon-command-Lcarbon*

  Implementation: `require('carbon').explore_left()`
  Alias:          `Lexplore` unless |carbon-setting-keep-netrw| is enabled.

  Opens the Carbon buffer in a new vertical split. When Carbon is opened this
  way, pressing the key mapped to |carbon-plug-edit| will open files in a
  split directly to the right.

  Subsequent calls will reuse a window previously opened via `Lcarbon` if this
  window still exists and valid.

  When called with a <bang> (`Carbon!`) or |carbon-setting-auto-reveal| enabled,
  the tree will expand to show the current buffer path and
  |carbon-view-flash-bang| it if possible. This also works for its alias.

  `------------------------------------------------------------------------------`
  Rcarbon                                                 *carbon-command-Rcarbon*

  Implementation: `require('carbon').explore_right()`
  Alias:          `Rexplore` unless |carbon-setting-keep-netrw| is enabled.

  Like |carbon-command-Lcarbon| but on the right side.

  `------------------------------------------------------------------------------`
  ToggleSidebarCarbon                         *carbon-command-ToggleSidebarCarbon*

  Implementation: `require('carbon').toggle_sidebar()`
  Alias:          `ToggleSidebarExplore` unless |carbon-setting-keep-netrw|
                  is enabled.

  Calls |carbon-carbon-explore-sidebar| if no sidebar window exists. Otherwise
  the existing sidebar window will be closed.

  When a new sidebar window is spawned it is also focussed automatically.
  This behavior can be disabled by setting |carbon-setting-sidebar-toggle-focus|
  to `false`.

  `------------------------------------------------------------------------------`
  Fcarbon                                                 *carbon-command-Fcarbon*

  Implementation: `require('carbon').explore_float()`

  Opens the Carbon buffer in a floating window. When Carbon is opened this
  way, Carbon will open files the following way:

  |carbon-plug-edit| will close the floating Carbon window and open the file in
  the current window.

  |carbon-plug-split| will close the floating Carbon window and open the file
  in a split relative to the current window.

  |carbon-plug-vsplit| will close the floating Carbon window and open the file
  in a vertical split relative to the current window.


  When called with a <bang> (`Carbon!`) or |carbon-setting-auto-reveal| enabled,
  the tree will expand to show the current buffer path and
  |carbon-view-flash-bang| it if possible.

  See |carbon-setting-float-settings| for more information on how to configure
  the floating window spawned by `:Fcarbon`.

================================================================================
AUTOCMDS                                                         *carbon-autocmds*

  This section documents the default |autocmd| commands that Carbon uses.

  `------------------------------------------------------------------------------`
  BufWinEnter                                         *carbon-autocmd-bufwinenter*

  Group:          |carbon-constant-augroup|
  Event:          `BufWinEnter`
  Pattern:
  Implementation: `view:show()`

  Local to Carbon buffers.
  Calls |carbon-view-show| when entering a Carbon buffer.

  `------------------------------------------------------------------------------`
  BufHidden                                             *carbon-autocmd-bufhidden*

  Group:          |carbon-constant-augroup|
  Event:          `BufHidden`
  Pattern:
  Implementation: `view:hide()`

  Local to Carbon buffers.
  Calls |carbon-view-hide| when the Carbon buffer is hidden.

  `------------------------------------------------------------------------------`
  CursorMovedI                                       *carbon-autocmd-cursormovedi*

  Group:          |carbon-constant-augroup|
  Event:          `CursorMovedI`
  Pattern:
  Implementation:

  Local to Carbon buffers. Called when moving the cursor in insert mode.
  Used during |carbon-view-create| to control the line and minimul column
  offset of the cursor.

  `------------------------------------------------------------------------------`
  DirChanged                                           *carbon-autocmd-dirchanged*

  Group:          |carbon-constant-augroup|
  Event:          `DirChanged`
  Pattern:        `global`
  Implementation: `require('carbon').cd()`

  Calls |carbon-view-cd| when changing |pwd| using |cd|.

================================================================================
PLUGS                                                               *carbon-plugs*

  This section documents the default |<Plug>| mappings that Carbon provides.
  |<Plug>| mappings are created unconditionally.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-up)                                               *carbon-plug-up*

  Implementation: `require('carbon').up()`
  Mapping:        |carbon-setting-actions-up|

  Sets the root of the current `view` to the parent directory of the current
  working directory. Accepts a [count], when given, jumps to [count]nth parent
  directory of the current working directory.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-down)                                           *carbon-plug-down*

  Implementation: `require('carbon').down()`
  Mapping:        |carbon-setting-actions-down|

  Sets the root of the current `view` to the directory under the cursor. If the
  entry under the cursor is a file then the parent directory of the file's path
  will be used. Accepts a [count] to allow navigating deeper into compressed
  paths. See |carbon-setting-compress| and |carbon-view-down| for more information
  about how compressed paths work and how they are handled.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-quit)                                           *carbon-plug-quit*

  Implementation: `require('carbon').quit()`
  Mapping:        |carbon-setting-actions-quit|

  When Carbon is active in the only window and there are multiple buffers
  this mapping will show the |alternate-file|. When Carbon is showing in one of
  several windows, the window will be closed. Finally, if Carbon is the only
  buffer in the only window, nothing happens.

  This mapping will never exit Neovim completely. See |carbon-carbon-quit| for
  more technical details.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-edit)                                           *carbon-plug-edit*

  Implementation: `require('carbon').edit()`
  Mapping:        |carbon-setting-actions-edit|

  If the entry below the cursor is a directory, expands or collapses the
  directory. Otherwise the file is opened in the current window unless the
  |carbon-command-Lcarbon| or |carbon-command-Fcarbon| command was used.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-move)                                           *carbon-plug-move*

  Implementation: `require('carbon').move()`
  Mapping:        |carbon-setting-actions-move|

  Prompts the user to enter a new destination for the entry under the cursor.
  Accepts a [count] to allow left to right selection of the entry to move when
  on a compressed path (|carbon-setting-compress|).

  For more information see |carbon-view-move|.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-reset)                                         *carbon-plug-reset*

  Implementation: `require('carbon').reset()`
  Mapping:        |carbon-setting-actions-reset|

  Sets root of the current `view` to its initial directory.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-split)                                         *carbon-plug-split*

  Implementation: `require('carbon').split()`
  Mapping:        |carbon-setting-actions-split|

  Opens the entry below the cursor in a new |split| if it is a file. If the
  entry is a directory then nothing happens. When Carbon was opened with
  |carbon-command-Fcarbon| this works slightly different.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-vsplit)                                       *carbon-plug-vsplit*

  Implementation: `require('carbon').vsplit()`
  Mapping:        |carbon-setting-actions-vsplit|

  Opens the entry below the cursor in a new |vsplit| if it is a file. If the
  entry is a directory then nothing happens. When Carbon was opened with
  |carbon-command-Fcarbon| this works slightly different.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-create)                                       *carbon-plug-create*

  Implementation: `require('carbon').create()`
  Mapping:        |carbon-setting-actions-create|

  Enters a context-aware insert mode in which a file or directory path can be
  typed. When done press <enter> to create the path, any non-existing
  parent directories will be created using |mkdir|. Pressing <enter> without
  typing anything will not create anything. Press <esc> to cancel.

  For more information see |carbon-view-create|.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-delete)                                       *carbon-plug-delete*

  Implementation: `require('carbon').delete()`
  Mapping:        |carbon-setting-actions-delete|

  Opens a confirmation popup to confirm whether you want to delete the entry
  under the cursor. Accepts a [count] to allow deleting directories "from left
  to right" when the cursor is on a compressed path (|carbon-setting-compress|).

  For more information see |carbon-view-delete|.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-close-parent)                           *carbon-plug-close-parent*

  Implementation: `require('carbon').close_parent()`
  Mapping:        |carbon-setting-actions-close-parent|

  Closes the parent directory of the entry the cursor is on. Accepts a [count]
  to allow closing multiple parents at once.

  `------------------------------------------------------------------------------`
  <Plug>(carbon-toggle-recursive)                   *carbon-plug-toggle-recursive*

  Implementation: `require('carbon').toggle_recursive()`
  Mapping:        |carbon-setting-actions-toggle-recursive|

  Recursively opens or closes the entry under the cursor. If the entry is not
  a directory nothing happens.

================================================================================
CARBON                                                             *carbon-carbon*

  Usage: `require('carbon')`

  This is Carbon's main module. It contains functions which are used for
  setup and initialization and it also defines the core actions which are
  exposed via |<Plug>| mappings

  `------------------------------------------------------------------------------`
  setup                                                      *carbon-carbon-setup*

  Signature: `require('carbon').setup(`{preferences}`)`

  Initializes Carbon.

  This method updates Carbon's |carbon-settings| with user {preferences}.
  The {preferences} argument can be a table which will be deep-merged with
  |carbon-settings-table| or a callback function which accepts
  |carbon-settings-table| as argument. The callback can modify the settings
  freely. See |carbon-setup| for init.vim / init.lua setup call examples.

  This method creates |carbon-commands|, |carbon-plugs|, |carbon-autocmds|, and
  highlights. It hijacks NetRW depending on the value of
  |carbon-setting-keep-netrw| and automatically opens the Carbon buffer if
  Neovim was opened with a directory path depending on |carbon-setting-auto-open|.
  It also attaches a callback to the watcher to enable auto-refreshing the
  buffer when file system events occur.

  This method must be called within your init.vim / init.lua configuration.

  `------------------------------------------------------------------------------`
  explore_buf_dir                                  *carbon-carbon-explore-buf-dir*

  Signature: `require('carbon').explore_buf_dir(`[{params}]`)`

  Called on |BufWinEnter| if |carbon-setting-open-on-dir| is enabled.
  When the buffer being entered is a directory Carbon will show instead.

  The {params} attribute, when given, must be a Lua table with a `file` key
  pointing to the absolute path of the buffer.

  If {params} is not passed or does not contain a `file` key, nothing is executed.

  `------------------------------------------------------------------------------`
  win_resized                                          *carbon-carbon-win-resized*

  Signature: `require('carbon').win_resized()`

  Resizes the sidebar to |carbon-setting-sidebar-width| after a |WinResized|
  event has occurred. When no sidebar is present this method does nothing.

  `------------------------------------------------------------------------------`
  session_load_post                              *carbon-carbon-session-load-post*

  Signature: `require('carbon').session_load_post()`

  Executed on |SessionLoadPost| events. Attempts to identify Carbon buffers.
  When a buffer whose `file` property ends in `carbon` is found, it is assumed
  to be a Carbon buffer. Carbon will initialize itself in such buffer.

  Additionally, if the `width` of the window the buffer is contained in
  matches that of |carbon-setting-sidebar-width| then Carbon will also restore
  sidebar flags which it attaches on windows. This will allow
  |ToggleSidebarCarbon| to work properly after sourcing a vim session.

  `------------------------------------------------------------------------------`
  edit                                                        *carbon-carbon-edit*

  Signature: `require('carbon').edit()`

  If the entry which the cursor is on is a directory then this method expands
  or collapses it depending on its current state. If it is a file and the
  current buffer was opened using |carbon-carbon-explore-sidebar| then the file
  will be opened in a new split. A split will be created if it does not exist.

  When this fails the file will be edited in the current window instead.

  `------------------------------------------------------------------------------`
  split                                                      *carbon-carbon-split*

  Signature: `require('carbon').split()`

  If the entry which the cursor is on is a directory then this will result in
  a no-op. If it is a file it will be opened in a horizontal split. Respects
  your |splitbelow| preference.

  `------------------------------------------------------------------------------`
  vsplit                                                    *carbon-carbon-vsplit*

  Signature: `require('carbon').vsplit()`

  Like |carbon-carbon-split| but instead of a horizontal split, opens a
  vertical split. Respects your |splitright| preference.

  `------------------------------------------------------------------------------`
  explore                                                  *carbon-carbon-explore*

  Signature: `require('carbon').explore(`[{options}]`)`

  Show Carbon in the current window. Calls |carbon-view-show| internally.
  Used by the |carbon-command-Carbon| command.

  When {options} is given and `options.bang` is `true` or when
  |carbon-setting-auto-reveal| is `true` then this calls
  |carbon-view-expand-to-path| to expand the tree to reveal
  the current buffer.

  `------------------------------------------------------------------------------`
  explore_sidebar                                  *carbon-carbon-explore-sidebar*

  Signature: `require('carbon').explore_sidebar(`[{options}]`)`

  Show Carbon in a new vertical split with a width of
  |carbon-setting-sidebar-width|. Used by the |carbon-command-Lcarbon| and
  |carbon-command-Rcarbon| commands and modifies how |carbon-carbon-edit| works
  for that window.

  Currently, the position can either be `'left'` or `'right'`.
  The position of the sidebar is resolved in following order:
  1. `options.position`
  2. |carbon-setting-sidebar-position|
  3. `'left'`

  When {options} is given and `options.bang` is `true` or when
  |carbon-setting-auto-reveal| is `true` then this calls
  |carbon-view-expand-to-path| to expand the tree to reveal
  the current buffer.

  Subsequent calls to `:Lcarbon` will attempt to navigate to an existing
  window opened via `:Lcarbon`.

  `------------------------------------------------------------------------------`
  explore_left                                        *carbon-carbon-explore-left*

  Signature: `require('carbon').explore_left(`[{options}]`)`

  Calls |carbon-carbon-explore-sidebar| with `options.position` set to `'left'`.
  All other options are passed through as-is.

  `------------------------------------------------------------------------------`
  explore_right                                      *carbon-carbon-explore-right*

  Signature: `require('carbon').explore_right(`[{options}]`)`

  Calls |carbon-carbon-explore-sidebar| with `options.position` set to `'right'`.
  All other options are passed through as-is.

  `------------------------------------------------------------------------------`
  toggle_sidebar                                    *carbon-carbon-toggle-sidebar*

  Signature: `require('carbon').toggle_sidebar(`[{options}]`)`

  When a sidebar window exists, it will be closed, otherwise
  |carbon-carbon-explore-sidebar| will be called and the new sidebar window
  will be focussed automatically.

  This automatic focus switch can be disabled by setting
  |carbon-setting-sidebar-toggle-focus| to `false`.

  `------------------------------------------------------------------------------`
  explore_float                                      *carbon-carbon-explore-float*

  Signature: `require('carbon').explore_float(`[{options}]`)`

  Show Carbon in a floating window. Used by the |carbon-command-Fcarbon| command
  and modifies how |carbon-carbon-edit| works for that window.

  When {options} is given and `options.bang` is `true` or when
  |carbon-setting-auto-reveal| is `true` then this calls
  |carbon-view-expand-to-path| to expand the tree to reveal
  the current buffer.

  `------------------------------------------------------------------------------`
  up                                                            *carbon-carbon-up*

  Signature: `require('carbon').up()`

  Calls |carbon-view-up|. When the root of the current `view` is updated
  successfully, this method will move the cursor to the top of the buffer and
  rerender.

  `------------------------------------------------------------------------------`
  reset                                                      *carbon-carbon-reset*

  Signature: `require('carbon').reset()`

  Calls |carbon-view-reset|. When the root of the current `view` is updated
  successfully, this method will move the cursor to the top of the buffer and
  rerender.

  `------------------------------------------------------------------------------`
  down                                                        *carbon-carbon-down*

  Signature: `require('carbon').down()`

  Calls |carbon-view-down|. When the root of the current `view` is updated
  successfully, this method will move the cursor to the top of the buffer and
  rerender.

  `------------------------------------------------------------------------------`
  create                                                    *carbon-carbon-create*

  Signature: `require('carbon').create()`

  Calls |carbon-view-create|.

  `------------------------------------------------------------------------------`
  move                                                        *carbon-carbon-move*

  Signature: `require('carbon').move()`

  Calls |carbon-view-move|.

  `------------------------------------------------------------------------------`
  delete                                                    *carbon-carbon-delete*

  Signature: `require('carbon').delete()`

  Calls |carbon-view-delete|.

  `------------------------------------------------------------------------------`
  cd                                                            *carbon-carbon-cd*

  Signature: `require('carbon').cd(`[{path}]`)`

  Calls |carbon-view-cd| to set the root of the current `view` to {path}. If {path}
  is not supplied then |vim.v| variable `vim.v.event.cwd` will be used. When updated
  successfully, this method will move the cursor to the top of the buffer
  and rerender.

  `------------------------------------------------------------------------------`
  quit                                                        *carbon-carbon-quit*

  Signature: `require('carbon').quit()`

  This method calls |nvim_list_wins| to check if there is more than one window, if
  this is the case |nvim_win_close| is called to close the current window.

  When there is only one window this method calls |nvim_list_bufs| to check if
  there is more than one buffer, if this is the case the |alternate-file| is
  shown in the current window if it exists.

  Finally, if the Carbon buffer is the only active buffer in the only active
  window, nothing happens.

  `------------------------------------------------------------------------------`
  toggle_recursive                                *carbon-carbon-toggle-recursive*

  Signature: `require('carbon').toggle_recursive()`

  Recursively opens or closes the entry under the cursor. If the entry is not
  a directory nothing happens.

  `------------------------------------------------------------------------------`
  close_parent                                        *carbon-carbon-close-parent*

  Signature: `require('carbon').close_parent()`

  Close the first parent directory under the cursor which can be collapsed. Closes
  `vim.v.count1` amount of collapsible parent directories.

  A parent of any entry is not "collapsible" if it is part of a compressed
  path (|carbon-setting-compress|).
================================================================================
UTIL                                                                 *carbon-util*

  Usage: `require('carbon.util')`

  This section describes the internal utilities used by Carbon itself. These
  methods must always be considered unstable and should not be used in code
  external to Carbon.

  `------------------------------------------------------------------------------`
  explore_path                                          *carbon-util-explore-path*

  Signature: `require('carbon.util').explore_path(`{path}[, {view}]`)`

  Converts {path} to an absolute path. When {view} (|carbon-view-instance|) is
  given its `root.path` will be used as a base instead of |uv.cwd()| when {path} is
  relative.

  If the current view or current working directory is `/example/directory`
  and this function is called with `../` then the result will be `/example`.
  For `../other/directory` the result will be `/example/other/directory`.

  When {path} starts with a `/` an absolute path is assumed. In this case no
  base path will be prepended.

  When {path} is an empty string, it will default to |uv.cwd()|.

  `------------------------------------------------------------------------------`
  is_excluded                                            *carbon-util-is-excluded*

  Signature: `require('carbon.util').is_excluded(`{path}`)`

  Returns `true` if given {path} matches any |carbon-setting-exclude|.
  Will not be called when |carbon-setting-exclude| is set to `nil` or `false`.

  `------------------------------------------------------------------------------`
  cursor                                                      *carbon-util-cursor*

  Signature: `require('carbon.util').cursor(`{row}, {col}`)`

  Wrapper for |nvim_win_set_cursor| which functions more like |cursor| except
  that {col} is zero-based instead of one based.

  `------------------------------------------------------------------------------`
  is_directory                                          *carbon-util-is-directory*

  Signature: `require('carbon.util').is_directory(`{path}`)`

  Uses the `type` attribute returned by `fs_stat` from `vim.loop` to determine
  whether given {path} is a directory. Returns a boolean value or `nil` if the
  call to `fs_stat` failed.

  `------------------------------------------------------------------------------`
  bufwinid                                                  *carbon-util-bufwinid*

  Signature: `require('carbon.util').bufwinid(`{buf}`)`

  Returns the |winid| of buffer {buf}. This method works across all tab pages
  unlike |bufwinid|.

  NOTE: This method will become redundant once implemented in Neovim. See:
  https://github.com/neovim/neovim/issues/18393 for more information.

  `------------------------------------------------------------------------------`
  plug                                                          *carbon-util-plug*

  Signature: `require('carbon.util').plug(`{name}`)`

  Converts {name} to a |<Plug>| map string. For example calling
  `require('carbon.util').plug('up')` will return the string `'<Plug>(carbon-up)'`.

  {name} must be a string.

  `------------------------------------------------------------------------------`
  tbl_find                                                  *carbon-util-tbl-find*

  Signature: `require('carbon.util').tbl_find(`{tbl}, {callback}`)`

  Execute `callback(`{value}, {key}`)` for each value in {tbl} until {callback}
  returns a truthy value. When {callback} returns true, return {value} and
  {key}. When no item is found, return `nil`.

  {tbl} must be a table.
  {callback} must be a function.

  `------------------------------------------------------------------------------`
  tbl_key                                                    *carbon-util-tbl-key*

  Signature: `require('carbon.util').tbl_key(`{tbl}, {item}`)`

  Returns the first key in {tbl} whose value is equal to {item}.
  When multiple keys are bound to the same value any one of those keys can be
  returned at random since Lua's `pairs` does not guarantee any specific ordering
  of keys being looped over.

  Returns `nil` when {item} is not found in {tbl}.

  `------------------------------------------------------------------------------`
  tbl_except                                              *carbon-util-tbl-except*

  Signature: `require('carbon.util').tbl_except(`{tbl}, {keys}`)`

  Return a new table with all keys from {tbl} except
  those specified in {keys}.

  {tbl} must be a table.
  {keys} must be a table.

  `------------------------------------------------------------------------------`
  command                                                    *carbon-util-command*

  Signature: `require('carbon.util').command(`{lhs}, {rhs}[, {options}]`)`

  Wraps |nvim_create_user_command|. The only difference between this
  function and |nvim_create_user_command| is that the {options} argument is
  optional, when not passed it will default to an empty table.

  {lhs} must be a string containing the key name for this |user-command|.
  {rhs} must be a vim command string or a Lua callback.
  {options} must be a table if supplied.

  `------------------------------------------------------------------------------`
  highlight                                                *carbon-util-highlight*

  Signature: `require('carbon.util').highlight(`{group}, {properties}`)`

  Wraps |nvim_set_hl|. The `default` option is set to `true` by default which
  can be overridden by {properties}.

  {group} must be a string containing the group name.
  {properties} must be a table.

  `------------------------------------------------------------------------------`
  add_highlight                                        *carbon-util-add-highlight*

  Signature: `require('carbon.util').add_highlight(`{buf}, {...}`)`

  Calls |nvim_buf_add_highlight| like this:

  `vim.api.nvim_buf_add_highlight(`{buf}, <ns_id>, {...}`)`

  <ns_id> will be set to |carbon-constant-hl|.

  `------------------------------------------------------------------------------`
  window_neighbors                                  *carbon-util-window-neighbors*

  Signature: `require('carbon.util').window_neighbors(`{win}, {sides}`)`

  Get windows on {sides} of {win} if present. The {sides} argument is a
  table of directions. Available directions are keys defined in
  |carbon-constant-directions|.

  Returns a table of results:

  `{`
    `{`
      `origin = `{win}`,`
      `position = <string>,`
      `target = <number>,`
    `}`,
    `... other sides defined in `{sides}
  `}`

  `------------------------------------------------------------------------------`
  find_buf_by_name                                  *carbon-util-find-buf-by-name*

  Signature: `require('carbon.util').find_buf_by_name(`{name}`)`

  Returns |bufnr| of buffer with name {name} or `nil` when no buffer with
  {name} exists.

  `------------------------------------------------------------------------------`
  resolve                                                    *carbon-util-resolve*

  Signature: `require('carbon.util').resolve(`{path}`)`

  Returns normalized absolute path of given {path}. Uses |vim.fs.normalize|
  followed by |fnamemodify| with `:p` as modifier to get the full path.
  Trailing slashes are stripped.

  `------------------------------------------------------------------------------`
  autocmd                                                    *carbon-util-autocmd*

  Signature: `require('carbon.util').autocmd(`{event}, {cmd_or_cb}[, {opts}]`)`

  Wraps |nvim_create_autocmd|. Sets {opts}`.callback` to {cmd_or_cb} before
  being passed to |nvim_create_autocmd|.

  The {opts}.`group` option will default to `'Carbon'` if not specified.

  Returns the `id` returned by |nvim_create_autocmd|.

  For more information about which autocommands Carbon uses,
  see |carbon-autocmds|.

  `------------------------------------------------------------------------------`
  clear_autocmd                                        *carbon-util-clear-autocmd*

  Signature: `require('carbon.util').clear_autocmd(`{event}, [, {opts}]`)`

  Wraps |nvim_clear_autocmds|. Sets {opts}`.event` to {event} before being
  passed to |nvim_clear_autocmds|.

  The {opts}.`group` option will default to `'Carbon'` if not specified.

  For more information about which autocommands Carbon uses,
  see |carbon-autocmds|.

  `------------------------------------------------------------------------------`
  set_winhl                                                *carbon-util-set-winhl*

  Signature: `require('carbon.util').set_winhl(`{win}, {highlights}`)`

  Overwrite highlights for {win}. The {highlights} table is expected to
  contain "source" group names as keys and "target" group names as values.

  For example:

  `util.set_winhl(`0, {Normal = 'CarbonIndicator', FloatBorder = 'Normal'}`)`

  Will result in the following command being executed:

  `winhl=Normal:CarbonIndicator,FloatBorder:Normal`

  {win} must be a valid |winnr|.
  {highlights} must be a table.

  `------------------------------------------------------------------------------`
  set_buf_autocmds                                  *carbon-util-set-buf-autocmds*

  Signature: `require('carbon.util').set_buf_autocmds(`{buf}, {autocmds}`)`

  Set {autocmds} for {buf}. The {autocmds} table is expected to contain
  {event} keys and their values being a {rhs}.

  Each {event} = {rhs} key-value pair must be valid in |carbon-util-autocmd|.
  The remaining arguments of |carbon-util-autocmd| are automatically set to:

  {buf} must be a valid |bufnr|.
  {autocmds} must be a table.

  `------------------------------------------------------------------------------`
  set_buf_mappings                                  *carbon-util-set-buf-mappings*

  Signature: `require('carbon.util').set_buf_mappings(`{buf}, {mappings}`)`

  Set {mappings} for {buf}. The {mappings} table is expected to be a table
  of tables where each nested table has the following layout:

  `{`{modes}, {lhs}, {rhs}[, {options}]`}`

  The {modes}, {lhs}, {rhs}, and optional {options} are
  passed to |vim.keymap.set|.

  When {options} is not specified, an empty table is used.
  The `buffer` option in {options} will always be set to {buf} in the call
  to |vim.keymap.set|.

  {buf} must be a valid |bufnr|.
  {mappings} must be a table.

  `------------------------------------------------------------------------------`
  create_scratch_buf                              *carbon-util-create-scratch-buf*

  Signature: `require('carbon.util').create_scratch_buf(`[{options}]`)`

  Create a new |unlisted-buffer| which is also a |scratch-buffer|.
  Some buffer options are set by default:

  |bufhidden|  =>  `'wipe'`
  |buftype|    =>  `'nofile'`
  |swapfile|   =>  `false`

  The optional {options} argument is a table which is expected to contain
  buffer "option" names as keys and buffer option values as values.

  Each key-value pair in {options} calls |nvim_buf_set_option| with the
  created buffer's |bufnr| as first argument, the key as second argument, and the
  value as the third argument.

  There are a few special keys which will NOT be passed through to
  |nvim_buf_set_option|. These are:

  - `name`
  - `lines`
  - `mappings`
  - `autocmds`

  When `options.name` is present, the name of the scratch buffer is set to
  the name specified using |nvim_buf_set_name|.

  The `options.lines` setting allows you to specify the initial contents of
  the buffer. The |modified| option will be set to `false` as well.

  When `options.mappings` is specified |carbon-util-set-buf-mappings| is
  called with the created buffer's |bufnr| as first argument and
  `options.mappings` as second argument.

  When `options.autocmds` is specified |carbon-util-set-buf-autocmds| is
  called with the created buffer's |bufnr| as first argument and
  `options.autocmds` as second argument.

  `------------------------------------------------------------------------------`
  confirm                                                    *carbon-util-confirm*

  Signature: `require('carbon.util').confirm(`{options}`)`

  Creates a confirmation popup using |nvim_open_win|. This popup is intended
  to be used to confirm specified actions via provided shortcuts or up/down
  navigation and pressing <enter> to confirm or using <esc> to cancel.

  All default mappings in the popup are unmapped with exception of <k>, <j>,
  <shift-k>, <shift-j>, <up>, <down>, and digits <0> through <9>.

  The {options} argument supports the following keys:
>
  {
    row = <number>,
    col = <number>,
    highlight = <string>,
    actions = <table<action>>,
  }
<
  Property:    `row`
  Default:     `vim.fn.line('.')`
  Required:    `false`
  Description:
    The "top" offset in lines at which to anchor the popup.

  Property:    `col`
  Default:     `vim.fn.col('.')`
  Required:    `false`
  Description:
    The "left" offset in columns at which to anchor the popup.

  Property:    `highlight`
  Default:     `'Normal'`
  Required:    `false`
  Description:
    The highlight group used to highlight FloatBorder
    (see |nvim_open_win|) and |CursorLine| in the popup.

  Property:    `actions`
  Default:     `nil`
  Required:    `true`
  Description:
    Specify popup actions via a table containing `<action>` entries.
    An `<action>` is a table with the following keys:
>
    {
      label = <string>,
      shortcut = <char>,
      callback = <function>,
    }
<
    Each action specified in `actions` will be shown in the popup. The position
    of each action will be based on its index in the `actions` table. The `label`
    will be the visible text shown in the popup and the `shortcut` key will be
    shown before the `label` between `[` and `]` characters. The `callback` function
    will be called when the action is executed.

    When an `<action>` does not include a `shortcut` it can only be triggered
    using keyboard navigation + <enter>.

    The `label` and `shortcut` properties must be unique within
    the table of `actions`.

================================================================================
ENTRY                                                               *carbon-entry*

  Usage: `require('carbon.entry')`

  Provides a consistent interface for working with files and directories and
  includes methods for fetching, caching, and sorting entries.
  See |carbon-entry-new| for details on entry objects, a term which will be used
  throughout this documentation to refer to entry instance objects.

  NOTE:
  static methods of this module are called using dot-syntax (`.`) whereas
  instance methods of this module are called using colon-syntax (`:`). This
  difference is visible in the function signature of each method.

  `------------------------------------------------------------------------------`
  new                                                           *carbon-entry-new*

  Signature: `require('carbon.entry').new(`{path}[, {parent}]`)`

  Returns a new entry object for provided absolute {path}. The {path}
  parameter must be a string. {path} may point to files as well as
  directories. When {parent} is supplied, it is set as the entry object's
  `parent` property. {parent} must be another entry object if provided.

  This method will also use |carbon-watcher-register| to register a listener
  for {path}.

  The returned entry object has the following shape:
>
  {
    path = '/absolute/path/to/file-or-dir',
    name = 'file-or-dir',
    is_directory = false,
    is_executable = false,
    is_symlink = nil,
  }
<
  - `path` is the absolute {path}.
  - `name` is the tail of given {path} as returned by |fnamemodify| `:t`.
  - `is_directory` is `true` when |isdirectory| equals `1`.
  - `is_executable` is `true` when |isdirectory| equals `0` and |executable| equals `1`.
  - `is_symlink` is:
    - `2` when {path} does not equal |resolve| of {path} and |getftime| equals `-1`.
    - `1` when {path} does not equal |resolve| of {path} and |getftime| is not `-1`.
    - `nil` otherwise.

  For `is_symlink`, a value of `2` indicates a broken symlink, a value of `1`
  indicates a valid symlink, and `nil` is used when {path} is not a symlink.

  The following methods can be called on entries:

  - |carbon-entry-synchronize|
  - |carbon-entry-children|
  - |carbon-entry-has-children|
  - |carbon-entry-get-children|
  - |carbon-entry-set-children|

  For example: `require('carbon.entry').new('/'):children()` will return a
  table with the direct children of `/` as entry objects.

  This function will fail if {path} is not a path to an existing file or
  directory and passing a {parent} that is not an entry object created via
  `require('carbon.entry').new()` will lead to fatal rendering errors.

  `------------------------------------------------------------------------------`
  find                                                         *carbon-entry-find*

  Signature: `require('carbon.entry').find(`{path}`)`

  Used to find the entry object associated with {path}. The {path} entry must
  already be loaded by Carbon for this to work. That is, it only finds
  children that have already been loaded by Carbon.

  When an entry object's `path` matches {path} it is returned, otherwise the
  return value will be `nil`. This function will not fail if {path}
  is not a string!

  For more information about entry objects, see: |carbon-entry-new|.

  `------------------------------------------------------------------------------`
  synchronize                                           *carbon-entry-synchronize*

  Signature: `entry:synchronize(`{paths}`)`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  Returns `nil` when `entry.is_directory` is `false`.

  When `entry.path` is not an existing key in the {paths} table and
  `entry:has_children()` is true, calls |carbon-entry-synchronize| on each
  child in `entry:children()`.

  When `entry.path` is an existing key in the {paths} table the previous
  children will be compared with the current children.

  This is done by collecting a list of unique paths from both previous and
  current children and then looping over each. Each unique path may have a
  `previous` and a `current` version. The following rules are then applied:

  1. When both `previous` and `current` are available and `current.is_directory`
     is `true` then |carbon-entry-set-open| is called on `current` with the value
     of |carbon-entry-is-open| of `previous` and finally `entry:synchronize(`{paths}`)`
     is called.

  2. When `previous` exists but `current` does not then
     |carbon-entry-terminate| is called on `previous`.

  3. When `current` exists but `previous` does not then nothing happens. The
     `current` entry is already an active child and `previous` has already
     been terminated.

  `------------------------------------------------------------------------------`
  terminate                                               *carbon-entry-terminate*

  Signature: `entry:terminate()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  This method calls |carbon-watcher-release| with `entry.path`, calls
  `entry:terminate` on |carbon-entry-children| if |carbon-entry-has-children|
  is `true`, and if `entry.parent` exists and has children, then entries with
  the same path as `entry.path` are removed.

  The above actions remove an entry from existence within Carbon's state. This
  method only performs in-memory operations on cached children and can be
  safely called on any entry that have since been removed from the file system.

  `------------------------------------------------------------------------------`
  set_open                                                 *carbon-entry-set-open*

  Signature: `entry:set_open(`{value}[, {recursive}]`)`

  Any truthy {value} will be treated as if the `entry` is open, any falsy {value}
  will be treated as if the `entry` is closed.

  When {recursive} is truthy and `entry:has_children()` is also true, traverse
  child directories and set them to the same {value} recursively.

  `------------------------------------------------------------------------------`
  is_open                                                   *carbon-entry-is-open*

  Signature: `entry:is_open()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  Returns `true` or `false` depending on the value set by |carbon-entry-set-open|.

  `------------------------------------------------------------------------------`
  set_compressible                                 *carbon-entry-set-compressible*

  Signature: `entry:set_compressible(`{value}`)`

  Any truthy value will be treated as if the `entry` is compressible, any
  falsy value will be treated as if the `entry` is not compressible.

  This method is used by |carbon-view-create| to control the rendered
  structure while a new path is being created.

  `------------------------------------------------------------------------------`
  is_compressible                                   *carbon-entry-is-compressible*

  Signature: `entry:is_compressible()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  Returns `true` by default or otherwise `true` or `false` depending on the value
  set by |carbon-entry-set-compressible|.

  `------------------------------------------------------------------------------`
  children                                                 *carbon-entry-children*

  Signature: `entry:children()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  When `entry.is_directory` is true, fetches children using
  |carbon-entry-get-children| and caches them. Always returns a table with
  child entry objects or an empty table if it has no children such as regular
  files and empty directories.

  `------------------------------------------------------------------------------`
  has_children                                         *carbon-entry-has-children*

  Signature: `entry:has_children()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  Returns `true` when children of `entry.path` have already been cached.
  Returns `false` otherwise.

  `------------------------------------------------------------------------------`
  set_children                                         *carbon-entry-set-children*

  Signature: `entry:set_children(`{children}`)`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  Set the cached children of `entry.path` to {children}. The {children} must
  be a table with entry object elements or `nil`.

  When {children} is `nil` the next call to |carbon-entry-children| will
  result in a fresh listing directly from the file system.

  `------------------------------------------------------------------------------`
  get_children                                         *carbon-entry-get-children*

  Signature: `entry:get_children()`

  The variable `entry` in this section refers to an entry object as returned by
  the |carbon-entry-new| method.

  Returns a table of entry object elements by calling |readdir| on `entry.path`.
  The entry objects will be direct children of `entry.path`. The table will be
  sorted in case-insensitive alphabetical order and all directories will come
  before any files.

  Paths matching any of the patterns defined in |carbon-setting-exclude| will
  be excluded from the returned table.

================================================================================
VIEW                                                                 *carbon-view*

  Usage: `require('carbon.view')`

  This module is one of Carbon's core modules. It provides methods and
  utilities to show directory trees, interact with them, and keep them
  synchronized with changes from the file system.

  `------------------------------------------------------------------------------`
  find                                                          *carbon-view-find*

  Signature: `require('carbon.view').find(`{path}`)`

  Returns an existing `view` (|carbon-view-instance|) for given {path} or `nil` if no
  instance for {path} exists.

  `------------------------------------------------------------------------------`
  get                                                            *carbon-view-get*

  Signature: `require('carbon.view').get(`{path}`)`

  Returns an existing `view` (|carbon-view-instance|) for given {path}. Otherwise a
  new `view` instance is created and returned.

                                                            *carbon-view-instance*

  A view instance includes information about a specific root directory. It
  holds various state attributes such as which directories have been expanded
  and which entries are compressible.

  Views instances exist to allow multiple Carbon buffers to exist which can
  show different directories. They are stored in a list local to this module
  to allow them being referenced by index.

  This is done to prevent confusion when moving the root directory of one view
  instance to one which is already present in another view.

  A view instance includes the following data structure:

  `{`
    `index = <number>,`
    `initial = <string>,`
    `states = <table<string, table<string>>>,`
    `root = <entry>`
  `}`

  `------------------------------------------------------------------------------`
  activate                                                  *carbon-view-activate*

  Signature: `require('carbon.view').activate(`[{options}]`)`

  Shows a `view` for `path` given in {options} in the current window. If `sidebar`
  in {options} is set to `'right'` or `'left'` then a new sidebar explorer is opened
  on that side. Otherwise if `float` is truthy then a floating explorer is
  opened. If neither is set then an explorer is shown in the current window.

  `------------------------------------------------------------------------------`
  current                                                    *carbon-view-current*

  Signature: `require('carbon.view').current()`

  Returns the |carbon-view-instance| for the current buffer if it is a Carbon
  explorer. When the current buffer is not a Carbon explorer `false` is returned.

  `------------------------------------------------------------------------------`
  execute                                                    *carbon-view-execute*

  Signature: `require('carbon.view').execute(`{callback}`)`

  Calls {callback} when the current active buffer is a Carbon buffer. Does
  nothing otherwise.

  Executes {callback} with a table containing the following keys:

  `{`
    `cursor =` |carbon-view-cursor|`,`
    `view = `|carbon-view-instance|`,`
  `}`

  `------------------------------------------------------------------------------`
  resync                                                      *carbon-view-resync*

  Signature: `require('carbon.view').resync(`{path}`)`

  Stores {path} in `view.resync_paths` and defers synchronization by
  |carbon-setting-sync-delay| milliseconds. This is done to batch multiple
  modifications to directories which were made in quick succession.

  Calls |carbon-entry-synchronize|  on the root directory of every `view` after
  |carbon-setting-sync-delay| amount of time has passed without any modifications.

  `------------------------------------------------------------------------------`
  close_sidebar                                        *carbon-view-close-sidebar*

  Signature: `require('carbon.view').close_sidebar()`

  Closes a sidebar Carbon explorer window.

  `------------------------------------------------------------------------------`
  close_float                                            *carbon-view-close-float*

  Signature: `require('carbon.view').close_float()`

  Closes a floating Carbon explorer window.

  `------------------------------------------------------------------------------`
  handle_sidebar_or_float                    *carbon-view-handle-sidebar-or-float*

  Signature: `require('carbon.view').handle_sidebar_or_float()`

  Executed before opening new files to handle sidebar/float mechanics i.e.
  when |carbon-command-ToggleSidebarCarbon| is used to open a sidebar explorer and
  a file is edited from there this function ensures that the buffer to the side
  of the explorer is used to show the file. If such buffer does not exist it
  creates it.

  `------------------------------------------------------------------------------`
  expand_to_path                                      *carbon-view-expand-to-path*

  Signature: `view:expand_to_path(`{path}`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Expands the Carbon buffer to reveal {path} in the tree. If {path} is not
  present within the root of the current `view` this will result in a no-op.

  When successful this sets `data.flash` to the entry identified by {path}.
  This causes the next call to |carbon-view-render| to move to and highlight
  the entry |carbon-view-flash-bang|.

  Given {path} will be converted to an absolute path via |carbon-util-resolve|.

  This method also works when Carbon is not currently visible. It will fail
  only if {path} is not a string.

  The buffer is NOT rerendered automatically, this must be done manually by
  calling |carbon-view-render| afterwards.

  `------------------------------------------------------------------------------`
  get_path_attr                                        *carbon-view-get-path-attr*

  Signature: `view:get_path_attr(`{path}, {attr}`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Get {attr} for {path} in the current `view`. When {attr} is `'compressible'`
  and its value is `nil` then `true` is returned.

  `------------------------------------------------------------------------------`
  set_path_attr                                        *carbon-view-set-path-attr*

  Signature: `view:set_path_attr(`{path}, {attr}`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Set {attr} for {path} in the current `view`.

  `------------------------------------------------------------------------------`
  buffers                                                    *carbon-view-buffers*

  Signature: `view:buffers()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Returns a list of buffers which belong to the current `view`. This is done using
  an internal `view.index` property which is stored in each buffer's `carbon`
  local variable which is attached to new Carbon buffers via |carbon-view-buffer|.

  `------------------------------------------------------------------------------`
  buffer                                                      *carbon-view-buffer*

  Signature: `view:buffer()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Checks if a buffer for the current `view` already exists in
  |carbon-view-buffers| and returns it. Otherwise creates and configures a new
  buffer, updates the current buffer handle and returns the new buffer handle.

  The buffer name is set to the root directory of the current `view` and the
  following buffer-local options are always set:

  |swapfile|    =>  `false`
  |filetype|    =>  `'carbon.explorer'`
  |bufhidden|   =>  `'wipe'`
  |buftype|     =>  `'nofile'`
  |modifiable|  =>  `false`
  |modified|    =>  `false`

  Actions in |carbon-setting-actions| will be mapped locally to this buffer to a
  |<Plug>| mapping with the same suffix from |carbon-plugs|.

  Additionally, a buffer-local `carbon` variable is set so that Carbon can
  figure out which buffers belong to Carbon.

  `------------------------------------------------------------------------------`
  update                                                      *carbon-view-update*

  Signature: `view:update()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Clears lines of the current `view` cached via |carbon-view-current-lines|.
  Does not automatically rerender the buffer!

  `------------------------------------------------------------------------------`
  render                                                      *carbon-view-render*

  Signature: `view:render()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Renders the Carbon buffer. The contents are determined by calling the
  |carbon-view-lines| method with the root entry object of the current `view` as
  only argument.

                                                          *carbon-view-flash-bang*

  After rendering, if `data.flash` is set to an entry which is currently visible,
  (it is set by |carbon-view-expand-to-path|) then the cursor will move to
  that entry and reset `data.flash` to `nil`.

  Additionally, when this happens, that entry is also highlighted using
  |carbon-setting-highlights-CarbonFlash|. The delay and duration of the
  highlight are controlled by |carbon-setting-flash|.

  `------------------------------------------------------------------------------`
  lines                                                        *carbon-view-lines*

  Signature: `view:lines(`{target}[, {lines}[, {depth}]]`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  The {entry} argument must be an entry object as returned by |carbon-entry-new|.
  The {lines} argument is optional. Defaults to an empty table `{}`. When {lines}
  is set to a table, this table will be used instead as accumulator value.
  Finally, the optional {depth} argument can be used to specify the initial
  indentation depth. Defaults to `0`.

  Returns a table of "line objects" to render. A "line object" has the
  following data layout:
>
  {
    entry = <entry>,
    line = <string>,
    lnum = <number>,
    depth = <number>,
    path = <table<entry>>,
    icon_width = <number>,
    highlights = <table<table<string, number, number>>>,
  }
<
  Property: `entry`

  One of the children of {entry}.

  Property: `line`

  This property is set to the text that should be rendered to the buffer.

  Property: `lnum`

  The line number of the entry. Used by |carbon-view-create| to determine
  the line number to move to for editing.

  Property: `depth`

  The indent depth of the entry. Used by |carbon-view-create| to determine
  the start column to move to for editing.

  Property: `icon_width`

  Width of file icons shown before a path. Used by |carbon-view-create| to
  determine the start column to move to for editing.

  Property: `highlights`

  The `highlights` property provides zero or more highlights for the current
  `line`. A highlight in this context is a table with the following structure:
>
  {
    <string HighlightGroupName>,
    <number start_column>,
    <number end_column>,
  }
<
  |carbon-view-render| uses |nvim_buf_add_highlight| to set the highlights.
  It is called the following way:

  `vim.api.nvim_buf_add_highlight(`
    |carbon-view-buffer|,
    |carbon-constant-hl|,
    `highlight[1],`
    `lnum - 1,`
    `highlight[2],`
    `highlight[3],`
  `)`

  Property: `path`

  When |carbon-setting-compress| is enabled, this table is filled with the
  compressed parent entry objects of `entry`.

  `------------------------------------------------------------------------------`
  current_lines                                        *carbon-view-current-lines*

  Signature: `view:current_lines()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Returns cached lines of the current `view` generated from |carbon-view-lines| if
  present. Otherwise |carbon-view-lines| is called and its results are cached.

  `------------------------------------------------------------------------------`
  cursor                                                      *carbon-view-cursor*

  Signature: `view:cursor(`[{opts}]`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Returns a table with the following shape:
>
  {
    line = <line>,
    target = <entry>,
    target_line = <line>,
  }
<
  Property: `line`

  An item at index `line('.')` from |carbon-view-lines|.

  Property: `target`

  Equal to `line.entry` by default but when called during a mapping, will respect
  |v:count| where possible. This is used for example to start deleting from
  "left to right" on compressed paths by prefixing a mapping with a [count].

  When {opts}`.target_directory_only` is truthy and `target.is_directory` is `false`
  then `target` will be set to `line.path[#line.path] or target.parent` BEFORE
  any [count] logic is applied.

  One way to describe the difference between `line.entry` and `target` is that
  `line.entry` will always point to the last path component entry on the current
  line whereas `target` points to the entry targetted by the user.

  Property: `target_line`

  Like `line` but `target_line` refers to the line which `target` is located on.

  For more information about compressed paths, see: |carbon-setting-compress|.

  `------------------------------------------------------------------------------`
  show                                                          *carbon-view-show*

  Signature: `view:show()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Sets the following local options:

  - |wrap| to `false`
  - |spell| to `false`
  - |fillchars| to `{ eob = ' ' }`

  Show the Carbon buffer in the current window. Triggers a |carbon-view-render|.

  `------------------------------------------------------------------------------`
  hide                                                          *carbon-view-hide*

  Signature: `view:hide()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Resets the following local options to their global defaults:

  - |wrap|
  - |spell|
  - |fillchars|

  Clears sidebar and float flags.

  `------------------------------------------------------------------------------`
  create                                                      *carbon-view-create*

  Signature: `view:create()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  When called, puts the Carbon buffer in a context-aware insert mode which
  allows a path to be typed. Pressing <cr> will confirm creation and pressing
  <esc> will cancel creation.

  Paths ending in slash (`/`) will create directories, otherwise regular files
  are created.

  The following section will show how this works on regular paths as well as
  compressed paths. It is recommended to familiarize yourself with
  |carbon-setting-compress| before reading on as most of the different
  scenarios involve compressed paths.

  There are a few different cases that can occur. Imagine the following
  directory structure with Neovim opened in a `/home/me/project` directory:

  1 `project/`
  2 `  deeply/nested/file.txt`
  3   `folder/`
  4 `  other/nested/folder/`
  5   `file.txt`

  When called with the cursor on a regular file it will use the parent
  directory of this file as a base for the path to create. If the cursor is
  on line 5, calling this method shows the following:

  1 `project/`
  2 `  deeply/nested/file.txt`
  3   `folder/`
  4 `  other/nested/folder/`
  5   `file.txt`
  6   |

  The parent directory of line 5 is actually `/home/me/project` so you enter
  path creation after all its children in the Carbon buffer (line 6 in this
  contrived case). Typing for example `/new/nested/file.txt` and pressing <cr>
  will create `/home/me/project/new/nested/file.txt`.

  When called with the cursor on a directory, that directory is used as a base
  for the path to create. If the cursor is on line 3, the following will show:

  1 `project/`
  2 `  deeply/nested/file.txt`
  3   `folder/`
  4     |
  5 `  other/nested/folder/`
  6   `file.txt`

  The cursor is placed on line 4 and nested "inside" this folder. Typing
  `/new/nested/file.txt` and pressing <cr> will create
  `/home/me/project/folder/new/nested/file.txt`.

  Finally, when the cursor is on the compressed path on line 2, by default
  the same rules apply as for regular file entries. In this case the base
  will be `/home/me/project/deeply/nested`:

  1 `project/`
  2 `+  deeply/nested/`
  3 `    file.txt`
  4     |
  5   `folder/`
  6 `  other/nested/folder/`
  7   `file.txt`

  Typing `/new/nested/file.txt` and pressing <cr> will create
  `/home/me/project/deeply/nested/new/nested/file.txt`.

  If the cursor was on line 4 instead of line 2, the base path would be
  `/home/me/project/other/nested/folder`:

  1 `project/`
  2 `  deeply/nested/file.txt`
  3   `folder/`
  4 `  other/nested/folder/`
  5     |
  6   `file.txt`

  Typing `/new/nested/file.txt` and pressing <cr> will create
  `/home/me/project/other/nested/folder/new/nested/file.txt`.

  This leaves us with one unresolved scenario, which is how to create files
  or directories at arbitrary parent directories of compressed paths.

  Support for this is implemented via `vim.v.count`. When a count is supplied to
  the mapping executing this function, if this count is greater than `0` then
  Carbon will count directories on compressed paths from left to right, and
  will create a file in the `vim.v.count` nth directory.

  Given the default |carbon-setting-actions-create| mapping of `c`, imagine we
  were on line 2 and pressed `1c`. This would show the following:

  1 `project/`
  2 `  deeply/`
  3 `    nested/file.txt`
  4     |
  3   `folder/`
  4 `  other/nested/folder/`
  5   `file.txt`

  Typing `/new/nested/file.txt` and pressing <cr> will create
  `/home/me/project/deeply/new/nested/file.txt`.

  For compressed paths which end in a directory the same rules apply except
  that by default, the current directory will be used as a base instead of the
  parent directory.

  Finally, when `vim.v.count` does not resolve to a directory, the default
  behavior as if no count was supplied will be executed.

  `------------------------------------------------------------------------------`
  delete                                                      *carbon-view-delete*

  Signature: `view:delete()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Prompts confirmation to delete the current entry under the cursor.
  When the current entry is a regular file or executable the file itself will be
  removed. When it is a directory, the directory and all its contents will be
  removed recursively. Finally, when it is a symlink, just the symlink will be
  removed.

  A [count] can be specified to start deleting from left-to-right. This is
  useful when the cursor is currently positioned on a compressed path.
  It is recommended to familiarize yourself with |carbon-setting-compress| before
  reading on as most of the different scenarios involve compressed paths.

  Imagine the following directory structure with Neovim opened in
  a `/home/me/project` directory:

  1 `project/`
  2 `  deeply/nested/file.txt`
  3   `folder/`
  4 `  other/nested/folder/`
  5   `file.txt`

  If we want to delete the file on line 5 then we can by pressing the mapping
  for |carbon-setting-actions-delete|. After doing so the buffer automatically
  updates to reflect the changes:

  1 `project/`
  2 `  deeply/nested/file.txt`
  3   `folder/`
  4 `  other/nested/folder/`

  If we want to delete the `folder/` directory on line 4, we can once again do
  so by pressing the delete mapping. By default, Carbon deletes from right to
  left. The rationale here is based on an assumption that most of the time
  you'll likely find yourself wanting to delete single files so the behaviour
  is streamlined for this use-case.

  Specifying a [count] will reverse the direction so it will delete from left
  to right instead, allowing for deletion of folders at any level of nesting
  in a compressed path. If instead of `folder/` on line 4 we wanted to delete
  `nested` we would prefix the mapping with the number `2` e.g. pressing `2d`
  and confirming deletion on line 4 would result in:

  1 `project/`
  2 `  deeply/nested/file.txt`
  3   `folder/`
  4 `  other/`

  If we wanted to delete the `deeply/` folder on line 2, we would press `1d`
  and confirm deletion, this would leave:

  1 `project/`
  2   `folder/`
  3 `  other/`

  The [count] is clamped. If it exceeds the amount of "components" in the path
  then it will select the last component (the actual entry of that line).

  `------------------------------------------------------------------------------`
  move                                                          *carbon-view-move*

  Signature: `view:move()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Prompts the user for a new destination for the entry below the cursor.
  A [count] can be supplied to move starting from left to right on compressed
  paths. The [count] is clamped. If it exceeds the amount of "components" in the
  path then it will select the last component (the actual entry of that line).

  Intermediate directories will be created if they do not exist.

  `------------------------------------------------------------------------------`
  focus_flash                                            *carbon-view-focus-flash*

  Signature: `view:focus_flash(`{duration}, {group}, {start}, {finish}`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Highlights a region from {start} to {finish} with {group} for {duration}
  milliseconds. {start} and {finish} must be values accepted by
  |vim.highlight.range|.

  See |carbon-view-flash-bang| for more information about customizing the
  highlighting properties when entries are revealed.

  `------------------------------------------------------------------------------`
  set_root                                                  *carbon-view-set-root*

  Signature: `view:set_root(`{target}[, {opts}]`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  The {target} argument can be an absolute path to a directory or a
  |carbon-entry-new| entry. When passed as an absolute path it is converted to
  an entry. The root of the current `view` is then set to this entry.

  When |carbon-setting-sync-pwd| is enabled Neovim's |pwd| is updated automatically.
  This is only done when the original root directory matches the current
  working directory.

  The |carbon-view-buffer| name will be set to the new root of the `view`
  unless {opts} is given and `opts.rename` is set to `false`.

  `------------------------------------------------------------------------------`
  cd                                                              *carbon-view-cd*

  Signature: `view:cd(`{path}`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Set the root of the current `view` to specified {path}.
  When {path} is a parent of the current root directory of `view` then
  |carbon-view-up| is used. Otherwise the root directory is set directly via
  |carbon-view-set-root|.

  `------------------------------------------------------------------------------`
  reset                                                        *carbon-view-reset*

  Signature: `view:reset()`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Reset the root of the current `view` to the directory it originally showed.

  `------------------------------------------------------------------------------`
  up                                                              *carbon-view-up*

  Signature: `view:up(`[{count}]`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Set the root of the current `view` to its {count}th parent directory. When
  {count} is not supplied, it will use `vim.v.count1` which defaults to `1` or
  [count] if specified while executing this method in a mapping.

  When |carbon-setting-sync-pwd| is enabled Neovim's |pwd| is updated automatically.
  This is only done when the original root directory matches the current
  working directory.

  Returns `true` if the root is replaced at least once. `nil` otherwise. This
  can happen when you are at your OS root directory and try to go up more.

  This method also tries to open the intermediate parent directories while
  navigating to the desired location.

  This is not always possible to enfore because Carbon can have multiple views
  representing different directories and the name of Carbon `view` buffers will
  be the absolute path to these directories.

  This causes issues when trying to navigate to a path for which a `view`
  already exists, because Carbon will rename the buffer to match its current
  root path which will yield |E95|.

  To solve this Carbon checks if a `view` for the desired destination exists.
  If this is the case, then Carbon skips traversing and opening parent
  directories and will instead show the existing view directly.

  In doing this, Carbon will no longer expand intermediate parents between the
  original `view` root and the destination `view` root.

  `------------------------------------------------------------------------------`
  down                                                          *carbon-view-down*

  Signature: `view:down(`[{count}]`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Set the root of the current `view` to its {count}th child directory below the
  cursor. When {count} is not supplied, it will use `vim.v.count1` which defaults
  to `1` or [count] if specified while executing this method in a mapping.

  Specifying a {count} is only useful when the cursor is on a compressed path.
  The |carbon-setting-compress| section explains how compressed paths work.

  With the cursor on this path `a/b/c/d/e.txt`, calling this method without
  specifying a {count} will move the root to `/a`, you will now see the path
  `b/c/d/e.txt`. If you call the method again, but this time you supply `2` as
  {count} you will navigate "past" `c/` directly into `d/`. You will now only
  see `e.txt`.

  When |carbon-setting-sync-pwd| is enabled Neovim's |pwd| is updated automatically.
  This is only done when the original root directory matches the current
  working directory.

  Returns `true` when the root is replaced, `nil` when the `new_root` path is the
  same as the current `data.root` path in which case the root is not replaced.

  `------------------------------------------------------------------------------`
  parents                                                    *carbon-view-parents*

  Signature: `view:parents(`[{count}]`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  Returns a table of parent entries (|carbon-entry-new|) sorted from nearest to
  farthest i.e. given a view whose root is `/a/b/c/d` and {count} set to `4` this
  function returns:

  `{`
    `<entry root.path = '/a/b/c'>,`
    `<entry root.path = '/a/b'>,`
    `<entry root.path = '/a'>,`
    `<entry root.path = ''>,`
  `}`

  An empty table is returned when there are no parents. If {count} is not
  supplied it will default to `1` and result in either a table with a single
  parent entry, or an empty table if there are no parents (i.e. the root
  directory of the operating system).

  `------------------------------------------------------------------------------`
  switch_to_existing_view                    *carbon-view-switch-to-existing-view*

  Signature: `view:switch_to_existing_view(`{path}`)`

  The variable `view` in this section refers to a |carbon-view-instance|.

  If an existing `view` instance exists which has its root set to {path} the
  current window will have its current buffer replaced for the buffer
  belonging to that existing view.

  Additionally, if the current `view` (before switching) root equals |uv.cwd()| and
  |carbon-setting-sync-pwd| is set then the cwd of Neovim is updated as well.

================================================================================
WATCHER                                                           *carbon-watcher*

  Usage: `require('carbon.watcher')`

  This module provides a thin wrapper around `vim.loop.new_fs_event`, see
  |watch-file| for more information about `vim.loop.new_fs_event`. Paths can
  be registered using |carbon-watcher-register|, once registered, any change
  to that path will cause an event to be emitted. Registered paths can be
  released using |carbon-watcher-release|. Releasing a path will stop the
  watcher for that path.

  If the path parameter of either of these functions is a directory, then that
  directory and all its children files and directories will be listened to.
  Carbon itself only listens to directories to reduce the amount of file
  watching this plugin does. A single watcher is created for each unique
  directory whose children have been traversed.

  Finally, |carbon-watcher-on| and |carbon-watcher-off| can be used to
  register callbacks on arbitrary events.

  The watcher itself only emits `carbon:synchronize` events to allow the
  buffer to respond to relevant changes to the current working directory.

  The `carbon:synchronize` event is a built-in event.
  See the list of built-in commands below for details about built-in events:

                                                  *carbon-watcher-built-in-events*

  Name:        `carbon:synchronize`
  Description: Used by |carbon-watcher| when listening for file system changes.

  `------------------------------------------------------------------------------`
  on                                                           *carbon-watcher-on*

  Signature: `require('carbon.watcher').on(`{event}, {callback}`)`

  Both {event} and {callback} are required.

  - {event} can be a table of event names or a string event name.
  - {callback} must be |vim.is_callable|.

  {event} can be any arbitrary string since anything can be emitted via
  |carbon-watcher-emit|.

                                                           *carbon-watcher-on-all*

  When {event} is set to `'*'` then {callback} is triggered for any event.
  Like any other event, {callback} which are bound to `'*'` can be cleared
  with |carbon-watcher-off|.

                                                      *carbon-watcher-on-callback*

  {callback} will receive the {event} which triggered it, and the {path}
  (absolute parent directory), {filename} (modified file), and {error} (if any).

  `function callback(`{event}, {dirpath}, {filename}, {error}`)`
  `  print(vim.inspect(`{event}, {dirpath}, {filename}, {error}`))`
  `end`

  `require('carbon.watcher').on('*', callback)`

  will listen to the `change` and `rename` events which are triggered by
  changes to paths registered with |carbon-watcher-register|.
  See |carbon-watcher-built-in-events| for a list of built-in events.

  In the call to `on` the callback was not passed as a closure but as a
  function reference, this allows clearing that specific callback with
  |carbon-watcher-off|. Anonymous closures can only be removed by clearing
  everything and should not be used.

  `------------------------------------------------------------------------------`
  off                                                         *carbon-watcher-off*

  Signature: `require('carbon.watcher').off(`[{event}[, {callback}]]`)`

  When called without arguments, clears all callbacks attached to any event
  including `'*'`:

  When called with just {event} clears the given event name if it is a string,
  or calls `off` again with each value in the {event} table.

  When called with {event} and {callback}, clears specified {callback} from
  {event} as described above.

  `------------------------------------------------------------------------------`
  emit                                                       *carbon-watcher-emit*

  Signature: `require('carbon.watcher').emit(`{event}[, {...varargs}]`)`

  Emits {event} with {event} as first argument and remaining {...varargs}
  as varargs arguments to registered callbacks. The {event} can be any string.

  After executing callbacks registered to {event}, all callbacks registered to
  `'*'` will be executed. See |carbon-watcher-on-all|

  NOTE: there are some events which carbon.nvim uses internally. See
  |carbon-watcher-built-in-events| for a list of built-in events.

  `------------------------------------------------------------------------------`
  keep                                                       *carbon-watcher-keep*

  Signature: `require('carbon.watcher').keep(`{callback}`)`

  Calls {callback} for each `path` which is currently being listened to.
  When {callback} returns `true` for a `path`, it will be kept.
  Otherwise, when `false` is returned |carbon-watcher-release| will be
  called with `path`.

  `------------------------------------------------------------------------------`
  release                                                 *carbon-watcher-release*

  Signature: `require('carbon.watcher').release(`[{path}]`)`

  Unregister a {path} registered by |carbon-watcher-register|. If {path} is not
  registered then every registered path will be released.

  `------------------------------------------------------------------------------`
  register                                               *carbon-watcher-register*

  Signature: `require('carbon.watcher').register(`{path}`)`

  Register an absolute {path}. Once registered, any changes made to this path
  will emit events based on events received from Neovim's Lua |vim.loop| api.

  See |carbon-watcher-built-in-events| for a list of built-in events.

  `------------------------------------------------------------------------------`
  has                                                         *carbon-watcher-has*

  Signature: `require('carbon.watcher').has(`{event}, {callback}`)`

  Returns `true` if {callback} is registered for {event} or `false` otherwise.

  `------------------------------------------------------------------------------`
  registered                                           *carbon-watcher-registered*

  Signature: `require('carbon.watcher').registered()`

  Returns a table of paths registered via |carbon-watcher-register|.

================================================================================
SETTINGS                                                         *carbon-settings*

  Usage: `require('carbon.settings')`

  Stores all the settings Carbon needs to function properly, it does not expose
  any methods of its own. See below for a table with references to helptags:

                                                           *carbon-settings-table*

  `{`
    `sync_pwd             = `|carbon-setting-sync-pwd|`,`
  `  compress             = `|carbon-setting-compress|`,`
  `  auto_open            = `|carbon-setting-auto-open|`,`
  `  keep_netrw           = `|carbon-setting-keep-netrw|`,`
  `  file_icons           = `|carbon-setting-file-icons|`,`
  `  sync_on_cd           = `|carbon-setting-sync-on-cd|`,`
  `  sync_delay           = `|carbon-setting-sync-delay|`,`
  `  sidebar_width        = `|carbon-setting-sidebar-width|`,`
  `  sidebar_toggle_focus = `|carbon-setting-sidebar-toggle-focus|`,`
  `  sidebar_position     = `|carbon-setting-sidebar-position|`,`
  `  auto_reveal          = `|carbon-setting-auto-reveal|`,`
  `  open_on_dir          = `|carbon-setting-open-on-dir|`,`
  `  exclude              = `|carbon-setting-exclude|`,`

  `  indicators = {`
  `    expand   = `|carbon-setting-indicators-expand|`,`
  `    collapse = `|carbon-setting-indicators-collapse|`,`
  `  },`

    `flash = {`
      `delay    = `|carbon-setting-flash-delay|`,`
      `duration = `|carbon-setting-flash-duration|`,`
    `},`

  `  actions = {`
  `    up               = `|carbon-setting-actions-up|`,`
  `    down             = `|carbon-setting-actions-down|`,`
  `    edit             = `|carbon-setting-actions-edit|`,`
  `    reset            = `|carbon-setting-actions-reset|`,`
  `    split            = `|carbon-setting-actions-split|`,`
  `    vsplit           = `|carbon-setting-actions-vsplit|`,`
  `    quit             = `|carbon-setting-actions-quit|`,`
  `    create           = `|carbon-setting-actions-create|`,`
  `    move             = `|carbon-setting-actions-move|`,`
  `    delete           = `|carbon-setting-actions-delete|`,`
  `    close_parent     = `|carbon-setting-actions-close-parent|`,`
  `    toggle_recursive = `|carbon-setting-actions-toggle-recursive|`,`
  `  },`

  `  highlights = {`
  `    CarbonDir           = `|carbon-setting-highlights-CarbonDir|`,`
  `    CarbonFile          = `|carbon-setting-highlights-CarbonFile|`,`
  `    CarbonExe           = `|carbon-setting-highlights-CarbonExe|`,`
  `    CarbonSymlink       = `|carbon-setting-highlights-CarbonSymlink|`,`
  `    CarbonBrokenSymlink = `|carbon-setting-highlights-CarbonBrokenSymlink|`,`
  `    CarbonIndicator     = `|carbon-setting-highlights-CarbonIndicator|`,`
  `    CarbonDanger        = `|carbon-setting-highlights-CarbonDanger|`,`
  `    CarbonPending       = `|carbon-setting-highlights-CarbonPending|`,`
  `    CarbonFlash         = `|carbon-setting-highlights-CarbonFlash|`,`
  `  },`
  `}`

  Each specific setting is detailed in this module's documentation.

  `------------------------------------------------------------------------------`
  sync_pwd                                               *carbon-setting-sync-pwd*

  Default: `false`

  When enabled, Carbon updates Vim's |pwd| to match the new root path whenever
  the buffer root changes.

  `------------------------------------------------------------------------------`
  compress                                               *carbon-setting-compress*

  Default: `true`

  When enabled, allows Carbon to compress deeply nested children as long as
  they only contain a single child and |carbon-entry-is-compressible| is `true`.
  For example, take the following structure:
>
  pwd
  |-- a/
  |-- |-- b/
  |-- |-- |-- c/
  |-- |-- |-- |-- d.txt
  |-- t/
  |-- |-- u/
  |-- |-- |-- v.txt
  |-- |-- |-- w.txt
  |-- |-- x/
  |-- |-- |-- y/
  |-- |-- |-- |-- z.txt
<
  We see here that `a/` contains a single child `b/` which contains a
  single child `c/` which contains a single child `d.txt`. We can also see
  that `t/` contains two children, `u/` which contains `v.txt` and `w.txt`, and `x/`
  which contains a single child `y` which contains a single child `z.txt`. When
  compression is enabled, Carbon shows the above structure like this:
>
  pwd/
    a/b/c/d.txt
  + v/
<
  Because `a/`, `b/`, `c/`, and `d.txt` are all only children of their parent,
  this path can be compressed to the point where we can directly see `d.txt`
  even though it is nested quite deep in the directory tree. For the other
  directory `t/` however, no compression can take place at the top level
  because `t/` itself contains two children. If we open `t/` however, you will
  see the following:
>
  pwd/
    a/b/c/d.txt
  - t/
    + u/
      x/y/z.txt
<
  We see here that `u/` is not expanded because it contains two children,
  `v.txt` and `w.txt` whereas `x/`, `y/`, and `z.txt` are all only children of
  their parent which means those can be compressed.

  `------------------------------------------------------------------------------`
  auto_open                                             *carbon-setting-auto-open*

  Default: `true`

  When enabled and Neovim is opened with a directory path argument, Carbon's
  buffer will open immediately.

  `------------------------------------------------------------------------------`
  keep_netrw                                           *carbon-setting-keep-netrw*

  Default: `false`

  Sets both `vim.g.loaded_netrw` and `vim.g.loaded_netrwPlugin` to `1` and
  deletes |augroup| `FileExplorer` and `Network`.

  When `true` NetRW will not be harmed by Carbon. This also means that
  `Explore` and `Lexplore` are no longer aliased to `Carbon` and `Lcarbon` anymore.

  This does not prevent Carbon from showing on vim startup instead of NetRW.
  To control this behavior, see |carbon-setting-auto-open|.

  `------------------------------------------------------------------------------`
  file_icons                                           *carbon-setting-file-icons*

  Default: `pcall(require, 'nvim-web-devicons')`

  Uses `pcall` to see if `nvim-web-devicons` can be required successfully.
  When `true`, Carbon will automatically start showing file icons.

  This can be disabled by setting it to `false` explicitly in your configuration.

  `------------------------------------------------------------------------------`
  sync_on_cd                                           *carbon-setting-sync-on-cd*

  Default: `not vim.opt.autochdir:get()`

  Disabled by default when |autochdir| is set to `1`, enabled by default when
  |autochdir| set to `0`. When enabled, Carbon listens for `:cd` commands.
  Once a `:cd` command is executed Carbon will automatically update
  the root of a `view` pointing to the original current working directory
  to the `:cd` path.

  `------------------------------------------------------------------------------`
  sync_delay                                           *carbon-setting-sync-delay*

  Default: `20`

  The amount of milliseconds to wait before updating and rerendering the
  buffer. Carbon debounces file system events by default to reduce the amount
  of updating and rerendering.

  `------------------------------------------------------------------------------`
  sidebar_width                                     *carbon-setting-sidebar-width*

  Default: `30`

  The width in columns of the sidebar window opened by |carbon-command-Lcarbon|.

  `------------------------------------------------------------------------------`
  sidebar_toggle_focus                       *carbon-setting-sidebar-toggle-focus*

  Default: `true`

  Whether or not to focus sidebar windows opened via `:ToggleSidebarCarbon`.

  `------------------------------------------------------------------------------`
  sidebar_position                               *carbon-setting-sidebar-position*

  Default: `'left'`

  Default sidebar position, see |carbon-carbon-explore-sidebar| for context.

  `------------------------------------------------------------------------------`
  auto_reveal                                         *carbon-setting-auto-reveal*

  Default: `false`

  By default, only the <bang> versions of all |carbon-commands| will reveal
  the current buffer. Enabling this will cause all versions of these commands
  to reveal the current buffer.

  `------------------------------------------------------------------------------`
  open_on_dir                                         *carbon-setting-open-on-dir*

  Default: `true`

  Shows a Carbon buffer when opening directories.

  `------------------------------------------------------------------------------`
  exclude                                                 *carbon-setting-exclude*

  Default: >
    {
      '~$',
      '#$',
      '%.git$',
      '%.bak$',
      '%.rbc$',
      '%.class$',
      '%.sw[a-p]$',
      '%.py[cod]$',
      '%.Trashes$',
      '%.DS_Store$',
      'Thumbs%.db$',
      '__pycache__',
      'node_modules',
    }
<
  Paths matching any Lua pattern are filtered removed. For more information
  about these patterns, see: https://www.lua.org/pil/20.2.html.
  This setting may be set to `nil` to show everything.

  `------------------------------------------------------------------------------`
  indicators                                           *carbon-setting-indicators*

  Default:
    `{`
    `  expand = '+',`                             *carbon-setting-indicators-expand*
    `  collapse = '-',`                         *carbon-setting-indicators-collapse*
    `}`

  Controls the expand and collapse indicators shown before a directory. Using
  more than one character is allowed. This setting may be set to `nil` to
  disable indicators. Individual indicators can also be disabled by setting
  them to `nil`.

  `------------------------------------------------------------------------------`
  flash                                                     *carbon-setting-flash*

  Default:
    `{`
    `  delay = 50,`                                     *carbon-setting-flash-delay*
    `  duration = 500,`                              *carbon-setting-flash-duration*
    `}`

  Controls highlight {delay} and {duration} for entries revealed by
  |carbon-view-expand-to-path|. Setting it to `nil` will disable
  highlighting of revealed entries.

  Uses |carbon-setting-highlights-CarbonFlash| to highlight the revealed entry.

  `------------------------------------------------------------------------------`
  float_settings                                   *carbon-setting-float-settings*

  Default: >
    function()
      local columns = vim.opt.columns:get()
      local rows = vim.opt.lines:get()
      local width = math.min(40, columns * 0.9)
      local height = math.min(20, rows * 0.9)

      return {
        relative = 'editor',
        style = 'minimal',
        border = 'rounded',
        width = width,
        height = height,
        col = math.floor(columns / 2 - width / 2),
        row = math.floor(rows / 2 - height / 2 - 2),
      }
    end
<
  This setting controls the window settings used in floating windows spawned
  via |carbon-command-Fcarbon|. When set to a table, this table will be passed to
  |nvim_open_win| directly.

  When set to a function, the function will be executed and its return value
  must be a table which will then be passed to |nvim_open_win|. The function
  form allows you to specify the size based on the current dimensions of the
  editor which is not possible when passing a table directly.

  The default function will create a horizontally and vertically centered
  popup with a maximum width of 80% up to 50 columns and maximum height of 80%
  up to 20 lines. All dimensions and offsets will be based on the current
  dimensions of the editor when this function is called.

  `------------------------------------------------------------------------------`
  actions                                                 *carbon-setting-actions*

  Default:
    `{`
    `  up = '[',`                                        *carbon-setting-actions-up*
    `  down = ']',`                                    *carbon-setting-actions-down*
    `  quit = 'q',`                                    *carbon-setting-actions-quit*
    `  edit = '<cr>',`                                 *carbon-setting-actions-edit*
    `  move = 'm',`                                    *carbon-setting-actions-move*
    `  reset = 'u',`                                  *carbon-setting-actions-reset*
    `  split = { '<c-x>', '<c-s>' },`                 *carbon-setting-actions-split*
    `  vsplit = '<c-v>',`                            *carbon-setting-actions-vsplit*
    `  create = { 'c', '%' },`                       *carbon-setting-actions-create*
    `  delete = 'd',`                                *carbon-setting-actions-delete*
    `  close_parent = '-',`                    *carbon-setting-actions-close-parent*
    `  toggle_recursive = '!',`            *carbon-setting-actions-toggle-recursive*
    `}`

  Default mappings for |carbon-plugs|. Setting this to `nil` will prevent
  Carbon from creating any mapping. Setting one of its properties to `nil`
  will disable the mapping for that specific property.

  More than one key may be mapped to an action by supplying a table of keys.
  For example mapping |carbon-setting-actions-reset| to `,` in addition to `.`
  looks like the following:

  `reset = { '.', ',' },`

  Each property maps to a |<Plug>| mapping defined in |carbon-plugs|:

  `up`               => |carbon-plug-up|
  `down`             => |carbon-plug-down|
  `quit`             => |carbon-plug-quit|
  `edit`             => |carbon-plug-edit|
  `move`             => |carbon-plug-move|
  `reset`            => |carbon-plug-reset|
  `split`            => |carbon-plug-split|
  `vsplit`           => |carbon-plug-vsplit|
  `create`           => |carbon-plug-create|
  `delete`           => |carbon-plug-delete|
  `close_parent`     => |carbon-plug-close-parent|
  `toggle_recursive` => |carbon-plug-toggle-recursive|

  `------------------------------------------------------------------------------`
  highlights                                           *carbon-setting-highlights*

  Default:
    `{`
    `  CarbonDir = {`                          *carbon-setting-highlights-CarbonDir*
    `    link = 'Directory',`
    `  },`
    `  CarbonFile = {`                        *carbon-setting-highlights-CarbonFile*
    `    link = 'Text',`
    `  },`
    `  CarbonExe = {`                          *carbon-setting-highlights-CarbonExe*
    `    link = 'NetrwExe',`
    `  },`
    `  CarbonSymlink = {`                  *carbon-setting-highlights-CarbonSymlink*
    `    link = 'NetrwSymLink',`
    `  },`
    `  CarbonBrokenSymlink = {`      *carbon-setting-highlights-CarbonBrokenSymlink*
    `    link = 'ErrorMsg'`
    `  },`
    `  CarbonIndicator = {`              *carbon-setting-highlights-CarbonIndicator*
    `    fg = 'Gray',`
    `    ctermfg = 'DarkGray',`
    `    bold = true,`
    `  },`
    `  CarbonFloat = {`                      *carbon-setting-highlights-CarbonFloat*
    `    bg = '#111111',`
    `    ctermbg = 'Black',`
    `  },`
    `  CarbonFloatBorder = {`          *carbon-setting-highlights-CarbonFloatBorder*
    `    link = 'CarbonFloat',`
    `  },`
    `  CarbonDanger = {`                    *carbon-setting-highlights-CarbonDanger*
    `    link = 'Error',`
    `  },`
    `  CarbonPending = {`                  *carbon-setting-highlights-CarbonPending*
    `    link = 'Search',`
    `  },`
    `  CarbonFlash = {`                      *carbon-setting-highlights-CarbonFlash*
    `    link = 'Visual',`
    `  },`
    `}`

  The full highlighting configuration used by Carbon. Each key of the table
  below will become a highlight group. The table of properties attached to each
  key will determine how the final generated highlight group will look. Any
  valid option accepted by |nvim_set_hl| is also valid in the table of
  properties for a key.

  The `highlights` setting may be set to `nil` to prevent any highlight groups
  from being generated.

vim:ft=help
